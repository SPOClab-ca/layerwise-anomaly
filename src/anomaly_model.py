import sklearn.mixture
import src.sent_encoder


class AnomalyModel:
  """Model that uses GMM on embeddings generated by BERT for finding syntactic
  or semantic anomalies."""

  def __init__(self, train_sentences, layer):
    self.layer = layer
    self.enc = src.sent_encoder.SentEncoder()
    self.gmm = sklearn.mixture.GaussianMixture()

    vecs = self.enc.contextual_token_vecs(train_sentences, layer=self.layer)
    self.gmm.fit(vecs)


  def gmm_score(self, sent):
    ids = [x for x in self.enc.auto_tokenizer(sent)['input_ids']
             if x not in self.enc.auto_tokenizer.all_special_ids]
    sent_vecs = self.enc.contextual_token_vecs([sent], layer=self.layer)
    assert len(ids) == sent_vecs.shape[0]
    
    scores = []
    tokens = []
    for i in range(sent_vecs.shape[0]):
      tokens.append(self.enc.auto_tokenizer.decode(ids[i]))
      scores.append(self.gmm.score([sent_vecs[i]]))
    return tokens, scores


  def eval_sent_pairs(self, sentpairs):
    """Calculate accuracy score, assuming first pair is correct one"""
    got_right = 0
    for correct_sent, incorrect_sent in sentpairs:
      if sum(self.gmm_score(correct_sent)[1]) > sum(self.gmm_score(incorrect_sent)[1]):
        got_right += 1
    return got_right / len(sentpairs)
